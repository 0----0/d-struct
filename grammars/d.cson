'fileTypes' : [
  'd'
  'di'
]
'name': 'D'
'scopeName': 'source.d'
# Root groups
# comment
#    line
#        double-slash
#    block
#        documentation
# constant
#    numeric
#    character
#    language
#    other
# entity - a block within the document
#    name
#        function
#        type
#        tag
#        section
#    other
#        inherited-class
#        attribute-name
# invalid
#    illegal
#    deprecated
# keyword
#    control
#    operator
#    other
# markup
#    underline
#        link
#    bold
#    heading
#    italic
#    list
#        numbered
#        unnumbered
#    quote
#    raw
#    other
# meta - larger blocks, like a whole function name.  Not styled
#    ???
# punctuation - not described in Textmate, presumably an Atom addition?
#    definition
#    separator
#    terminator
# storage
#    type
#    modifier
# string
#    quoted
#        single
#        double
#        triple
#        other
# support - items provided by the language/frameworkd, for example typeid() in D
#    function
#    class
#    type
#    constant
#    variable
#    other
# variable
#    parameter
#    language
#    other



'patterns' : [
    {
        'include': '#strings'
    }
    {
        'include': '#comments'
    }
    {
        'include': '#primitive-types'
    }
    {
        'include': '#constants-and-special-vars'
    }
    {
        'include': '#attributes'
    }
    {
        'include': '#keywords'
    }
]
# Repository of base constructs
# Use these to match code patterns
#
# all-types
# annotations
# anonymous-classes-and-new
# assertions
# attributes
# class
# class-body
# code
# comments
# comments-inline
# constants-and-special-vars
# enums
# keywords
# method-call
# methods
# object-types
# object-types-inherited
# parameters
# parens
# primitive-arrays
# primitive-types
# storage-modifiers
# strings
# throws
# values
# variables

'repository':
    'all-types':
        'patterns': [

        ]
    'annotations':
        'patterns': [

        ]
    'attributes':
        'patterns': [
            {
                'match': '(@(safe|system|trusted))\\b'
                'name': 'keyword.other.safety.d'
            }
            {
                'match': '(@property)\\b'
                'name': 'keyword.other.property.d'
            }
        ]
    'code':
        'patterns': [

        ]
    'anonymous-classes-and-new':
        'patterns': [

        ]
    'assertions':
        'patterns': [

        ]
    'class':
        'patterns': [

        ]
    'class-body':
        'patterns': [

        ]
    'code':
        'patterns': [

        ]
    'comments':
        'patterns': [
            {
                'captures':
                    '0':
                        'name': 'punctuation.definition.comment.d'
                'match': '/\\*\\*/'
                'name': 'comment.block.empty.d'
            }
            {
                'include': '#comments-inline'
            }
        ]
    'comments-inline':
        'patterns': [
            {
                # C-style comments
                'begin': '/\\*'
                'end': '\\*/'
                'name': 'comment.block.d'
            }
            {
                # C++-style comments
                'begin': '//'
                'end': '$'
                'name': 'comment.block.d'
            }
            {
                # Embedded documentation style
                'begin': '/\\+\\+'
                'end': '\\+/'
                'name': 'comment.block.embedded.d'
            }
        ]
    'constants-and-special-vars':
        'patterns': [
            {
                # Special constants
                'match': '\\b(true|false|null)\\b'
                'name': 'constant.language.d'
            }
            {
                # Special variables
                'match': '\\b(this|super)\\b'
                'name': 'variable.language.d'
            }
            {
                'include': '#numerics'
            }

        ]
    'enums':
        'patterns': [

        ]
    'keywords':
        'patterns': [
            {
                # Control keywords
                'match': '\\b(case|do|else|for|foreach|goto|if|switch|while)\\b'
                'name': 'keyword.control.d'
            }

        ]
    'method-call':
        'patterns': [

        ]
    'methods':
        'patterns': [

        ]
    'numerics':
        # Match all numerics D is capable of (a lot!)
        'patterns': [
            {
                # Handle the weirdness that is hexadecimal floats
                'match': '\\b0[xX][0-9a-fA-F_]*(\.[0-9a-fA-F_]*)?([pP]|([pP][\+-]))[0-9][0-9_]*[LfF]?\\b'
                'name': 'constant.numeric.float.hexidecimal.d'
            }
            {
                'match': '(((0[1-9_])|[1-9])?[0-9_]*\.?[0-9_]*([eE][\+-]?)?[0-9][0-9_]*[lfF]?)\\b'
                'name': 'constant.numeric.float.d'
            }
            {
                # Hex, binary and octal integers
                'match': '\\b0(((x|X)[0-9a-fA-F_]+)|([0-7_]+)|(b|B)[01_]+)([lL][uU]|[uU][lL]|[uUlL])?\\b'
                'name': 'constant.numeric.integer.other.d'
            }
            {
                # base-10 integers
                'match': '\\b[1-9][0-9_]*([lL][uU]|[uU][lL]|[uUlL])?\\b'
                'name': 'constant.numeric.integer.decimal.d'
            }
        ]
    'object-types':
        'patterns': [

        ]
    'object-types-inherited':
        'patterns': [

        ]
    'parameters':
        'patterns': [

        ]
    'parens':
        'patterns': [

        ]
    'primitive-arrays':
        'patterns': [
            'match': '\\b(?:void|bool|byte|ubyte|short|ushort|int|uint|long|ulong|float|double|real|char|wchar|dchar|size_t)(\\[\\])*\\b'
            'name': 'storage.type.primitive.array.d'

        ]
    'primitive-types':
        'patterns': [
            'match': '\\b(void|bool|byte|ubyte|short|ushort|int|uint|long|ulong|float|double|real|char|wchar|dchar|size_t)\\b'
            'name': 'storage.type.primitive.d'
        ]
    'storage-modifiers':
        'patterns': [

        ]
    'strings':
        'patterns': [
            {
                'begin': '"'
                'beginCaptures':
                    '0':
                        'name': 'punctuation.definition.string.begin.d'
                'end': '"'
                'endCaptures':
                    '0':
                        'name': 'punctuation.definition.string.end.d'
                'name': 'string.quoted.double.d'
                # Deal with escape characters
                'patterns': [
                    {
                        'match': '\\\\.'
                        'name': 'constant.character.escape.d'
                    }
                ]
            }
        ]
    'throws':
        'patterns': [

        ]
    'values':
        'patterns': [

        ]
    'variables':
        'patterns': [

        ]
# Repository end
#
# End of d.cson
